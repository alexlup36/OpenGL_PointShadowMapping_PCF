#version 450

// Input data
layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec2 texCoordinate;
layout(location = 2) in vec3 vertexNormal;

// Output data
out vec2 TexCoord0;
out vec3 Normal0;
out vec3 Position0;
out mat4 InvTransModelView;

out vec4 PositionCS;
out vec3 NormalCS;
out vec4 PositionLS;

// Uniform varialbles
uniform mat4 MVP;	
uniform mat4 World;	
uniform mat4 ModelView;

// Directional light
uniform mat4 DirLightViewMatrix;

void main()
{
	// Transform the vertex position by the MVP matrix
	vec4 v = vec4(vertexPosition, 1.0f);
    gl_Position = MVP * v;
	
	// Pass the texture coordinate
	TexCoord0 = texCoordinate;
	
	// Transform the vertex normal into world space
	Normal0 = transpose(inverse(mat3(World))) * vertexNormal;
	
	// Normal position in camera space
	NormalCS = transpose(inverse(mat3(ModelView))) * vertexNormal;
	
	// Transform the position into world space
	Position0 = mat3(World) * vertexPosition;

	// Vertex position in camera space
	PositionCS = ModelView * v;

	// Compute vertex position in light space
	PositionLS = DirLightViewMatrix * v;
}