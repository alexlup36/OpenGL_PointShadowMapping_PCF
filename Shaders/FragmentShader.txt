#version 330 core

// Declaration
struct DirectionalLight
{
	vec3 Color;
	float AmbientIntensity;
	vec3 Direction;
	float DiffuseIntensity;
};

struct PointLight
{
	// Point light
	vec3 Position;
	vec3 Color;
	float AmbientIntensity;
	float DiffuseIntensity;
	
	// Attenuation
	float Constant;                                                                 
    float Linear;                                                                   
    float Exp; 
};


// Input data
in vec2 TexCoord0;
in vec3 Normal0;
in vec3 Position0;

// Output data
out vec4 color;

// Uniform varialbles
uniform int NumPointLights; 
uniform sampler2D sampler;

uniform DirectionalLight directionalLight;
uniform PointLight PointLights[5];

// Specular properties
uniform vec3 eyePosition;
uniform float specularIntensity;
uniform float specularPower;

//***********~~~~~~~~~~~~~~~~~~~*****************//
vec4 LightCalculation(vec3 color,
	float ambientIntensity,
	float diffuseIntensity,
	vec3 direction)
{
	// Normalize the normal from the vertex shader
	vec3 normal = normalize(Normal0);
	// Light direction
	vec3 lightDir = normalize(direction);

	// Calculate the ambient component
	vec4 AmbientColor = vec4(color, 1.0f) * ambientIntensity;
	
	// Calculate the diffuse component
	// Calculate the diffuse factor
	float diffuseFactor = dot(normalize(Normal0), -lightDir);
	vec4 DiffuseColor = vec4(color, 1.0f) * diffuseIntensity * max(diffuseFactor, 0.0f);
	
	// Calculate the specular component
	vec3 vertexToEye = normalize(eyePosition - Position0);
	vec3 reflection = normalize(reflect(lightDir, normal));
	float specularFactor = max(dot(vertexToEye, reflection), 0.0f);
	specularFactor = pow(specularFactor, specularPower);
	vec4 SpecularColor = vec4(color, 1.0f)  * specularFactor * specularIntensity;
			
	// Final color of the fragment
	return AmbientColor + SpecularColor + DiffuseColor;// + 
}

vec4 CalcDirectionalLight(DirectionalLight dir)
{
	return LightCalculation(dir.Color, dir.AmbientIntensity, dir.DiffuseIntensity, dir.Direction);
}

vec4 CalcPointLight(int i)
{
	// Vector from the light position to the pixel
	vec3 direction = normalize(Position0 - PointLights[i].Position);
	// Compute the length of the direction vector as the distance between them
	float distance = length(direction);
	
	// Calculate the light for point light no. i
	vec4 color = LightCalculation(PointLights[i].Color, PointLights[i].AmbientIntensity, PointLights[i].DiffuseIntensity, direction);
	// Calculate the attenuation for the point light no. i
	float attenuation = PointLights[i].Constant + PointLights[i].Linear / distance + PointLights[i].Exp / (distance * distance);
	
	// Return the attenuated color
	return color / attenuation;
}

void main()
{	
	// Add the directional color to the final color
	color = CalcDirectionalLight(directionalLight);
	
	// Add the point lights to the final color
	for (int i = 0; i < NumPointLights; i++)
	{
		color += CalcPointLight(i);
	}
}